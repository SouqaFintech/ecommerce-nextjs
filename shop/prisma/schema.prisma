// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String?
  profile       Profile?
  shops         Shop[]
  managedShop   Shop?        @relation("ManagedShop", fields: [managedShopId], references: [id])
  managedShopId String?      @map("managed_shop_id")
  isActive      Boolean      @default(true) @map("is_active")
  address       UserAddress[]
  permissions   Permission[]
  wallet        Json?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  Review        Review[]
  Feedback      Feedback[]
  Report        Report[]
  Order         Order[]
  ShopOwner    Shop[]        @relation("ShopOwner")
  ShopStaffs   Shop[]        @relation("ShopStaffs")
}

model Permission {
  id        String   @id @default(cuid())
  name      String?
  guardName String?  @map("guard_name")
  pivot     Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Profile {
  id         String      @id @default(cuid())
  avatarId   String?     @map("avatar_id")
  avatar     Attachment? @relation(fields: [avatarId], references: [id])
  bio        String?
  socials    Social[]
  contact    String?
  customer   User?       @relation(fields: [customerId], references: [id])
  customerId String?     @map("customer_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
}

model Address {
  id            String          @id             @default(cuid())
  title         String
  refName       String          @map("ref_name")
  buildingName  String?         @map("building_name")
  streetAddress String          @map("street_address")
  location      Json?           @map("geolocation")
  country       String
  city          String
  state         String
  zip           String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt      @map("updated_at")

  UserAddress  UserAddress      @relation("UserAddress")
}

enum UserAddressType {
  HOME
  WORK
}

model UserAddress {
  id            String          @id @default(cuid())
  type          UserAddressType @default(HOME)
  addressId     String          @map("address_id")
  address       Address         @relation(fields: [addressId], references: [id])
  customer      User            @relation(fields: [customerId], references: [id])
  customerId    String          @map("customer_id")
  isDefault     Boolean         @default(false) @map("default")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
}

model Shop {
  id             String           @id @default(cuid())
  ownerId        String           @map("owner_id")
  owner          User             @relation("ShopOwner", fields: [ownerId], references: [id])
  staffs         User[]           @relation("ShopStaffs")
  isActive       Boolean          @default(true) @map("is_active")
  ordersCount    Int              @default(0) @map("orders_count")
  productsCount  Int              @default(0) @map("products_count")
  balanceId      String?          @map("balance_id")
  balance        Balance?         @relation(fields: [balanceId], references: [id])
  name           String
  slug           String           @unique
  description    String?
  coverImageId   String           @map("cover_image_id")
  coverImage     Attachment       @relation("ShopCoverImage", fields: [coverImageId], references: [id])
  logoId         String?          @map("logo_id")
  logo           Attachment?      @relation("ShopLogo", fields: [logoId], references: [id])
  addressId      Int              @map("address_id")
  address        ShopAddress      @relation(fields: [addressId], references: [id])
  settingsId     String?          @map("settings_id")
  settings       ShopSettings?    @relation(fields: [settingsId], references: [id])
  distance       String?
  lat            String?
  lng            String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  User           User[]
  Product        Product[]
  Review         Review[]
  Attribute      Attribute[]
  AttributeValue AttributeValue[]
  Order          Order[]
  Coupon         Coupon[]
}

model ShopAddress {
  id            String   @id @default(cuid())
  receiverName  String   @map("receiver_name")
  houseNumber   String?  @map("house_number")
  buildingName  String?  @map("building_name")
  streetAddress String   @map("street_address")
  geolocation   Json?    @map("geolocation")
  country       String
  city          String
  state         String
  zip           String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  Shop          Shop[]
}

model Balance {
  id                  String       @id @default(cuid())
  adminCommissionRate Float        @map("admin_commission_rate")
  shopId              String       @map("shop_id")
  shop                Shop         @relation(fields: [shopId], references: [id])
  totalEarnings       Float        @map("total_earnings")
  withdrawnAmount     Float        @map("withdrawn_amount")
  currentBalance      Float        @map("current_balance")
  paymentInfo         PaymentInfo? @relation(fields: [paymentInfoId], references: [id])
  paymentInfoId       String?      @map("payment_info_id")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")
}

model PaymentInfo {
  id        String    @id @default(cuid())
  account   String
  name      String
  email     String
  bank      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Balance   Balance[]
}

model ShopSettings {
  id        String   @id @default(cuid())
  socials   Json     @map("socials")
  contact   String
  location  Json     @map("location")
  website   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Shop      Shop[]
}

model Social {
  id        String   @id @default(cuid())
  type      String
  link      String
  profileId String   @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  parentId            String?     @map("parent_id")
  parent              Category?   @relation("CategoryParent", fields: [parentId], references: [id])
  children            Category[]  @relation("CategoryParent")
  details             String?
  imageId             String?     @map("image_id")
  image               Attachment? @relation(fields: [imageId], references: [id])
  icon                String?
  type                String?
  products            Product[]   @relation("CategoryProducts")
  language            String
  translatedLanguages String[]    @map("translated_languages")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
}

model Attachment {
  id        String   @id @default(cuid())
  thumbnail String
  original  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  coverForShops  Shop[]           @relation("ShopCoverImage")
  logoForShops   Shop[]           @relation("ShopLogo")
  Profile        Profile[]
  Category       Category[]
  Review         Review?          @relation(fields: [reviewId], references: [id])
  reviewId       String?
  Tag            Tag[]
  Coupon         Coupon[]
  ProductGallery ProductGalleryAttachment[]
  Product        Product[]
}

model ProductGalleryAttachment {
  id           String     @id @default(cuid())
  productId    String?    @map("product_id")
  product      Product?   @relation(fields: [productId], references: [id])
  attachmentId String     @map("attachment_id")
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("product_gallery_attachments")
}

model Product {
  id                  String              @id @default(cuid())
  name                String
  slug                String              @unique
  type                ProductType?
  typeId              Int                 @map("type_id")
  productType         String              @map("product_type")
  categories          Category[]          @relation("CategoryProducts")
  tags                Tag[]               @relation("ProductTags")
  variations          AttributeValue[]    @relation("ProductVariations")
  variationOptions    Variation[]         @relation("ProductVariationOptions")
  orderItems          OrderProductPivot[] @relation("OrderProducts")
  shopId              Int                 @map("shop_id")
  shop                Shop                @relation(fields: [shopId], references: [id])
  relatedProducts     Product[]           @relation("RelatedProducts")
  description         String
  inStock             Boolean             @map("in_stock")
  isTaxable           Boolean             @map("is_taxable")
  salePrice           Float?              @map("sale_price")
  maxPrice            Float?              @map("max_price")
  minPrice            Float?              @map("min_price")
  sku                 String?
  gallery             ProductGalleryAttachment[]
  imageId             String?             @map("image_id")
  image               Attachment?         @relation("ProductImage", fields: [imageId], references: [id])
  status              ProductStatus       @default(DRAFT) @map("status")
  height              String?
  length              String?
  width               String?
  price               Float?
  quantity            Int
  unit                String
  ratings             Int
  inWishlist          Boolean             @map("in_wishlist")
  myReview            Review[]            @relation("ProductReviews")
  language            String?
  translatedLanguages String[]            @map("translated_languages")
  visibility          String?
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  
  Review              Review[]
  Order               Order?              @relation(fields: [orderId], references: [id])
  orderId             String?
  Variation           Variation[]
  AttributeValue      AttributeValue[]
}

model Review {
  id                     String       @id @default(cuid())
  rating                 Int
  name                   String
  comment                String
  shop                   Shop         @relation(fields: [shopId], references: [id])
  shopId                 String       @map("shop_id")
  order                  Order        @relation(fields: [orderId], references: [id])
  orderId                String       @map("order_id")
  photos                 Attachment[]
  user                   User         @relation("UserReviews", fields: [userId], references: [id])
  userId                 String       @map("user_id")
  product                Product      @relation(fields: [productId], references: [id])
  productId              String       @map("product_id")
  feedbacks              Feedback[]
  positiveFeedbacksCount Int          @default(0) @map("positive_feedbacks_count")
  negativeFeedbacksCount Int          @default(0) @map("negative_feedbacks_count")
  abusiveReports         Report[]
  abusiveReportsCount    Int?         @default(0) @map("abusive_reports_count")
  variationOptionId      String?      @map("variation_option_id")
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")
  User                   User         @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  modelType String   @map("model_type")
  modelId   String   @map("model_id")
  positive  Boolean?
  negative  Boolean?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?
}

model Report {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  modelId   Int      @map("model_id")
  modelType String   @map("model_type")
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?
}

// TODO doesnt it needs any relationship with Product and Order?
//answer: Yes, it does. The OrderProductPivot model is used to create a many-to-many relationship between the Product and Order models, allowing for the storage of additional information about the product in the context of an order, such as quantity, unit price, and subtotal.  
model OrderProductPivot {
  id                String   @id @default(cuid())
  orderId           String   @map("order_id")
  order             Order    @relation("OrderProducts", fields: [orderId], references: [id])
  productId         String   @map("product_id")
  product           Product  @relation("OrderProducts", fields: [productId], references: [id])
  variationOptionId Int?     @map("variation_option_id")
  orderQuantity     Int      @map("order_quantity")
  unitPrice         Float    @map("unit_price")
  subtotal          Float
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
}

model Variation {
  id        Int               @id @default(autoincrement())
  title     String
  price     Float
  sku       String
  isDisable Boolean           @map("is_disable")
  salePrice Float?            @map("sale_price")
  quantity  Int
  options   VariationOption[]
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  Product   Product?          @relation(fields: [productId], references: [id])
  productId String?
}

model VariationOption {
  id          Int        @id @default(autoincrement())
  name        String
  value       String
  variation   Variation? @relation(fields: [variationId], references: [id])
  variationId Int?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
}

model File {
  id           String   @id @default(cuid())
  attachmentId Int      @map("attachment_id")
  url          String
  fileableId   Int      @map("fileable_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

model Tag {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  parentId            String?     @map("parent_id")
  parent              Tag?        @relation("TagParent", fields: [parentId], references: [id])
  children            Tag[]       @relation("TagParent")
  details             String?
  imageId             String?     @map("image_id")
  image               Attachment? @relation(fields: [imageId], references: [id])
  icon                String?
  type                String?
  products            Product[]   @relation("ProductTags")
  language            String
  translatedLanguages String[]    @map("translated_languages")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
}

model Attribute {
  id                  String           @id @default(cuid())
  name                String
  shopId              String           @map("shop_id")
  shop                Shop             @relation(fields: [shopId], references: [id])
  slug                String           @unique
  values              AttributeValue[]
  language            String
  translatedLanguages String[]         @map("translated_languages")
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
}

model AttributeValue {
  id          String    @id @default(cuid())
  shopId      String    @map("shop_id")
  shop        Shop      @relation(fields: [shopId], references: [id])
  value       String
  meta        String?
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String    @map("attribute_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Product     Product?  @relation(fields: [productId], references: [id])
  productId   String?
}

enum ProductStatus {
  PUBLISH
  DRAFT
}

enum ProductType {
  SIMPLE
  VARIABLE
}

enum PaymentGatewayType {
  STRIPE
  CASH_ON_DELIVERY
  CASH
  FULL_WALLET_PAYMENT
  PAYPAL
  RAZORPAY
}

enum OrderStatusType {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
  AT_LOCAL_FACILITY
  OUT_FOR_DELIVERY
}

enum PaymentStatusType {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REVERSAL
  CASH_ON_DELIVERY
  CASH
  WALLET
  AWAITING_FOR_APPROVAL
}

model Order {
  id              String              @id @default(cuid())
  trackingNumber  String              @map("tracking_number")
  customerId      Int                 @map("customer_id")
  customerContact String              @map("customer_contact")
  customer        User                @relation(fields: [customerId], references: [id])
  parentOrderId   String?             @map("parent_order_id")
  parentOrder     Order?              @relation("OrderParent", fields: [parentOrderId], references: [id])
  children        Order[]             @relation("OrderParent")
  items           OrderProductPivot[] @relation("OrderProducts")
  orderStatus     OrderStatusType     @default(PENDING) @map("order_status")
  paymentStatus   PaymentStatusType   @default(PENDING) @map("payment_status")
  amount          Float
  salesTax        Float               @map("sales_tax")
  total           Float
  paidTotal       Float               @map("paid_total")
  paymentId       String?             @map("payment_id")
  paymentGateway  PaymentGatewayType
  couponId        Int?                @map("coupon_id")
  coupon          Coupon?             @relation(fields: [couponId], references: [id])
  shopId          Int                 @map("shop_id")
  shop            Shop                @relation(fields: [shopId], references: [id])
  discount        Float?
  deliveryFee     Float               @map("delivery_fee")
  deliveryTime    String              @map("delivery_time")
  products        Product[]           @relation("OrderProducts")

  language              String
  translatedLanguages   String[]       @map("translated_languages")
  paymentIntent         PaymentIntent?
  alteredPaymentGateway String?        @map("altered_payment_gateway")
  Review                Review[]
  OrderAddress          OrderAddress[]
  Coupon                Coupon?        @relation(fields: [couponId], references: [id])
  Product               Product[]
}

//NOTE OrderAddress is immutable to avoid issues with address changes after order creation
model OrderAddress {
  id            String   @id @default(cuid())
  orderId       String   @map("order_id")
  order         Order    @relation(fields: [orderId], references: [id])
  receiverName  String   @map("receiver_name")
  houseNumber   String?  @map("house_number")
  buildingName  String?  @map("building_name")
  streetAddress String   @map("street_address")
  geolocation   Json?    @map("geolocation")
  country       String
  city          String
  state         String
  zip           String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}

model Coupon {
  id                  String      @id @default(cuid())
  code                String      @unique
  description         String?
  minimumCartAmount   Float       @map("minimum_cart_amount")
  orders              Order[]     @relation("CouponOrders")
  type                CouponType  @default(FIXED)
  imageId             String?     @map("image_id")
  image               Attachment? @relation(fields: [imageId], references: [id])
  isValid             Boolean     @default(false) @map("is_valid")
  amount              Float
  activeFrom          DateTime    @map("active_from")
  expireAt            DateTime    @map("expire_at")
  language            String
  translatedLanguages String[]    @map("translated_languages")
  target              Boolean?
  shopId              Int?        @map("shop_id")
  shop                Shop?       @relation(fields: [shopId], references: [id])
  isApprove           Boolean?    @default(false) @map("is_approve")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  Order               Order[]
}

enum CouponType {
  FIXED
  PERCENTAGE
  FREE_SHIPPING
}

model PaymentIntent {
  id                Int                @id @default(autoincrement())
  orderId           Int                @map("order_id")
  order             Order              @relation(fields: [orderId], references: [id])
  trackingNumber    String             @map("tracking_number")
  paymentGateway    PaymentGatewayType @map("payment_gateway")
  paymentIntentInfo Json               @map("payment_intent_info")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
}
